// COCO begin add
/*
Hierbei handelt es sich um eine der beiden Frame-Dateien. Diese wurden extra für KnowME angepasst.
Um die Änderungen zu kennzeichnen, wird folgende Konvention vereinbart:
---
// COCO begin add
   Quelltext oder Kommentar, der hinzugefügt wurde und in der originalen Frame-Datei nicht existert.
// COCO end add
---
// COCO begin change
   Quelltext oder Kommentar, der geändert wurde und in der originalen Frame-Datei in anderer Form vorliegt.
// COCO end change
---
// COCO delete
// Kommentar zur Begründung der Löschung
---
Um genau zu sehen, was an der Frame-Datei geändert wurde, empfehlt sich ein DIFF mit der originalen Frame-Datei.
Genauso sollte man Verfahren, wenn eine neuere Version von CoCo eingespielt werden soll.
Die originalen Frame-Dateien befinden sich in folgendem Ordner: resources/originalParserFrameFiles
@author Franz Schwab
*/
// COCO end add

/*-------------------------------------------------------------------------
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
ported from C# to Java by Wolfgang Ahorner
with improvements by Pat Terry, Rhodes University

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2, or (at your option) any 
later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than 
Coco/R itself) does not fall under the GNU General Public License.
------------------------------------------------------------------------*/
-->begin

public class Parser {
-->constants
	static final boolean T = true;
	static final boolean x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	Scanner scanner;
	Errors errors;

	-->declarations

	// COCO begin change
	public Parser(Scanner scanner, KnowledgeBase kb, boolean addMode) {
		this.scanner = scanner;
		errors = new Errors(this.scanner.getFilename());
        this.kb = kb;
        this.kbm = KnowledgeBaseManagement.createInstance(kb);
        this.addMode = addMode;
	}
	// COCO end change

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		// COCO begin change
		if (errDist >= minErrDist) errors.Error(t.line, t.col, msg, Message.ERROR);
		// COCO end change
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) { ++errDist; break; }
-->pragmas
			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		boolean[] s = new boolean[maxT+1];
		if (la.kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			for (int i=0; i <= maxT; i++) {
				s[i] = set[syFol][i] || set[repFol][i] || set[0][i];
			}
			SynErr(n);
			while (!s[la.kind]) Get();
			return StartOf(syFol);
		}
	}
	
-->productions

	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
-->parseRoot
		Expect(0);
	}

	private boolean[][] set = {
-->initialization
	};
	    
    // COCO begin add
    public List<Message> getErrorMessages() {
        return errors.getMessages();
    }
	// COCO end add
} // end Parser


class Errors {
	public int count = 0;
	public String errMsgFormat = "-- line {0} col {1}: {2}";
	
    // COCO begin add
    private String filename = new String();
    private List<Message> messages = new LinkedList<Message>();
	// COCO end add

	// COCO begin add
	public Errors(String filename) {
		this.filename = filename;
	}
	// COCO end add

    // COCO begin change
	// originally it's called printMsg() )
	private void addMsg(int line, int column, String msg, String messageType) {
        // COCO: es fehlt noch die Angabe der Spaltennnummer und des Filenamen 
        Message message = new Message(messageType, msg, this.filename, line, column, "");
        messages.add(message);
	}
	// COCO end change
	
	public void SynErr (int line, int col, int n) {
			String s;
			switch (n) {-->errors
				default: s = "error " + n; break;
			}

			// COCO begin change
			ResourceBundle rb = ResourceBundle.getBundle("properties.textParser");
			String result = rb.getString("parser.error.unknownError") + ": "+"parser.error.wrappedError";
	        try {
	            result = MessageFormat.format(
	                rb.getString("parser.error.wrappedError"), s);
	        }
	        catch (MissingResourceException e) {}
	        addMsg(line, col, result, Message.ERROR);
			// COCO end change

			count++;
	}
	
	// COCO delete
	// hier wurde die Funktion SemErr() gelöscht, da sie nicht benötigt wird.

	// COCO begin change
	public void Error (int line, int col, String s, String messageType) {	
       
        // COCO: not in Coco
		addMsg(line, col, s, messageType);
		count++;
	}
	// COCO end change
	
	// COCO delete
	// hier wurde die Funktion Exception() gelöscht, da sie nicht benötigt wird.
	
    // COCO begin add
    public List<Message> getMessages() {
        return messages;      
    }
	// COCO end add

} // Errors

$$$